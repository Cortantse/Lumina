# 前后端状态转移

## 1. 状态定义

### 后端状态 (Rust)
```
States: 
    初始 (Initial): 什么都不干，只是激活 vad 组件
    说话中 (Speaking): 发送音频帧给后端，vad 计时保持清零
    等待中 (Waiting): 不发送音频帧，只发送静音上报事件
    听音中 (Listening): 播放后端音频，前端暂停录音
    临界转移 (TransitionBuffer): 临时状态，等待后端返回非空识别文本确认有效语音，对前端完全透明
```

### 前端状态 (Vue)
```
States:
    idle: 空闲状态
    listening: Lumina 正在听
    speaking: Lumina 正在说话
```

### 状态映射关系
前端 Vue 的状态和 Rust 后端的状态是反的，Rust 的主体是用户，Vue 的主体是 Lumina：
```
idle = 初始
listening = 说话中/等待中
speaking = 听音中
```

## 2. 事件定义

### 后端事件 (Rust)
```
Events: 
    麦克风一帧有声音 (VoiceFrame)
    麦克风一帧无声音 (SilenceFrame)
    后端结束session (BackendEndSession)
    后端请求重置 (BackendResetToInitial)
    后端音频开始播放 (AudioPlaybackStart)
    后端音频播放结束 (AudioPlaybackEnd)
    后端返回任意非空识别文本 (BackendReturnText)
    临界状态超时 (TransitionTimeout): 临界转移状态等待识别文本超过500ms触发
```

## 3. 状态转移规则

### 初始状态的转移

```
on(麦克风一帧有声音) from(初始) to(临界转移)
    - 记录进入临界态的时间
    - 保存上一个可见状态
    - 开始发送音频帧到Python
    - 重置静音帧计数
    - 停止静音上报

on(后端音频开始播放) from(初始) to(听音中)
    - 停止静音上报

on(麦克风一帧无声音) from(初始) - 保持状态，不发送音频帧
on(后端结束session) from(初始) - 保持状态
on(后端请求重置) from(初始) - 保持状态，已在初始状态
on(TransitionTimeout) from(初始) - 忽略，保持状态
```

### 临界转移状态的转移

```
on(后端返回任意非空识别文本) from(临界转移) to(说话中)
    - 确认有效语音，继续发送音频帧
    - 退出临界态，清除计时器
    - 重置静音帧计数

on(后端结束session/后端请求重置) from(临界转移) to(初始)
    - 清除临界态计时器

on(后端音频开始播放) from(临界转移) to(听音中)
    - 清除临界态计时器
    - 停止静音上报

on(语音帧/静音帧) from(临界转移) - 保持状态并继续发送音频

on(TransitionTimeout) from(临界转移) to(上一个可见状态)
    - 如果超过500ms未收到有效识别文本，回到原状态
    - 临界状态超时会自动检测并触发转移
    - 清除临界态计时器
    - 停止发送音频帧

on(后端音频播放结束) from(临界转移) - 保持状态并继续发送音频
```

### 说话中状态的转移

```
on(麦克风一帧无声音) from(说话中) - 累计静音帧计数
    - 如果累计静音帧 >= max_silence_frames，则转到(等待中)
        - 开始静音上报
        - 重置静音帧计数
        - 停止发送音频帧
    - 否则继续发送音频帧(包括静音帧)以保持连续性

on(麦克风一帧有声音) from(说话中) - 重置静音帧计数并继续发送音频

on(后端结束session) from(说话中) to(初始)
    - 重置静音帧计数
    - 停止静音上报
    - 停止所有处理

on(后端请求重置) from(说话中) to(初始)
    - 重置静音帧计数
    - 停止静音上报
    - 停止所有处理

on(后端音频开始播放) from(说话中) to(听音中)
    - 重置静音帧计数
    - 停止静音上报
    - 停止发送音频帧

on(TransitionTimeout) from(说话中) - 忽略，继续发送音频帧
```

### 等待中状态的转移

```
on(麦克风一帧有声音) from(等待中) to(临界转移)
    - 发送前置上下文帧（最近的几帧静音数据）
    - 保存上一个可见状态
    - 记录进入临界态的时间
    - 重置静音帧计数
    - 停止静音上报
    - 重新开始发送音频帧到Python

on(麦克风一帧无声音) from(等待中) - 保持状态，继续不发送音频帧，静音上报继续进行

on(后端结束session) from(等待中) to(初始)
    - 重置静音帧计数
    - 停止静音上报
    - 停止所有处理

on(后端请求重置) from(等待中) to(初始)
    - 重置静音帧计数
    - 停止静音上报
    - 停止所有处理

on(后端音频开始播放) from(等待中) to(听音中)
    - 停止静音上报
    - 不发送音频帧

on(TransitionTimeout) from(等待中) - 忽略，继续静音上报
```

### 听音中状态的转移

```
on(麦克风一帧有声音) from(听音中) to(临界转移)
    - 用户打断，记录上一个可见状态
    - 记录进入临界态的时间
    - 重置静音帧计数
    - 发送前置上下文帧
    - 开始发送音频帧

on(麦克风一帧无声音) from(听音中) - 保持状态，继续不发送音频帧

on(后端音频播放结束) from(听音中) to(初始)
    - 不发送音频帧

on(后端结束session) from(听音中) to(初始)
    - 停止所有处理

on(后端请求重置) from(听音中) to(初始)
    - 停止所有处理

on(后端音频开始播放) from(听音中) - 保持状态，继续不发送音频帧

on(TransitionTimeout) from(听音中) - 忽略，继续不发送音频帧
```

## 4. 关于临界转移状态的特殊说明

临界状态的设计目的:
1. 对前端完全透明，临界态时前端显示用户仍处于上一个状态
2. 用于解决VAD误触发问题，只有当检测到语音并且后端STT返回有效文本时才进入说话状态
3. 设置超时机制(500ms)，如果在临界状态下超时未收到文本，则自动回退到上一个状态

临界状态工作流程:
1. 在任何状态检测到语音时，先保存当前状态，进入临界转移状态
2. 开始发送音频帧到后端，同时启动计时器
3. 如果在500ms内收到非空识别文本，转为说话状态
4. 如果超时未收到文本，回到上一个可见状态，相当于忽略这次VAD检测

## 5. 前端 SiriWave 状态机

SiriWave 组件实现了三种视觉状态，对应前端的三种状态：

```
idle: 空闲状态
    - 较小球体大小(0.9)，内敛
    - 深邃蓝绿色调(0.545~0.57)
    - 适中的形变强度(idleIntensity)

listening: Lumina 正在听
    - 标准球体大小(1.0)，专注
    - 青蓝色调(0.528~0.55)
    - 较高的形变强度(listeningIntensity)

speaking: Lumina 正在说话
    - 较大球体大小(1.2)，活跃表达
    - 亮青蓝色调(0.512~0.535)
    - 最高的形变强度(speakingIntensity)
```

状态切换时实现了平滑过渡动画，使用EaseInOutQuad缓动函数实现色彩和大小的渐变。







